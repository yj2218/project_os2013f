#include "rbtree.h"
#include <stdio.h>
#include <stdlib.h>

//test code
//스트럭트에 rb_node 넣어서 씀.
struct thread{
	struct rb_node node;
	int num;
};

struct rb_root mytree = RB_ROOT;

//search 템플릿, 고쳐 쓰면 됨.
struct thread *rbnode_search(struct rb_root *root, int number){
	struct rb_node *node= root->rb_node;
	while(node){
		struct thread *data = container_of(node, struct thread, node);
		int result = (number - data->num);
		if(result<0) node = node -> rb_left;
		else if (result >0) node -> rb_right;
		else		    return data;
	}
	return NULL;
}
//insert 템플릿, 고쳐 쓰면 됨.
int insert(struct rb_root *root, struct thread *data){
	struct rb_node **new = &(root->rb_node);
	struct rb_node *parent = NULL;

	while(*new){
		struct thread *this = container_of(*new, struct thread, node);
		int result = (data->num-this->num);
		parent = *new;
		if(result <0)new=&((*new)->rb_left);
		else if(result >0)new=&((*new)->rb_right);
		else return 0;
	}
	rb_link_node(&data->node, parent, new);
	rb_insert_color(&data->node, root);
	return 1;
}

struct thread* create_rbnode(int key){
	struct thread * newnode = (struct thread *)malloc(sizeof(struct thread));
	rb_init_node(&newnode -> node);
	newnode->num=key;
	return newnode;
}

void rb_print(struct rb_node *Node){
	printf("%d\n", container_of(Node,struct thread,node));
	rb_print(Node->rb_left);
	rb_print(Node->rb_right);
}

int main(){
	threads *data[10];
	printf("rbtree insert\n");
	int i=0;
	for(i=0; i<9; i++){
		data[i]=create_rbnode((i+1)*10);
	}
	for(i=0; i<9; i++){
		printf("\n insert node %d \n " , i+1);
		rbnode_insert(&mytree,data[i]);
		rb_print(mytree.rb_node);	
	}
	
	for(i=0; i<9 ; i++)free(data[i]);
	
	return 0;
} 
